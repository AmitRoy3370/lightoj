import java.util.Scanner;

public class Main {
    
    static Scanner in = new Scanner(System.in);
    
    static int testCases, n;
    
    static long left[], right[], jump_left_to_right[], jump_right_to_left[];
    
    static StringBuilder ans = new StringBuilder();
    
    /*
    
    problem statement: here we have n floor's in  
    ..................
    
    each buildings.So,we have total 2n floor's.
    
    as the structure of the twin tower is as like
    as this
    
    -    -
    -  - -
    -    -
    -    -
    -    -
    
    here the monkey start from the ground floor
    and go to the top of the building to eat n
    fruit's.from one floor he can go one floor up       or one floor down. he can go only 
    the next floor at every time. one floor to
    other floor will take no time, but other's
    will take time.we have to calculate the
    min time required to eat n fruit's.
    
    solve example:
    ................
    
    eg1:
    
    4 -> number of floor
    5    6    8    9 -> time to eat each building
    7    9    3    10 -> same values of right 
    5    2    3 -> time to jump left
    2    4    3 -> time to jump right
    
    either we can take the fruite from the present
    building or can take by shifting the tower.
    
    */
    
    static void solve(int t) {
        
        ans.append("Case ").append(t).append(": ");
        
        long final_ans = 0L;
        
        long dp_left[] = new long[n + 1];
        long dp_right[] = new long[n + 1];
        
        dp_left[0] = left[0];
        dp_right[0] = right[0];
        
        for(int i = 1; i < n; ++i) {
            
            /*
            
            take from the left tower or come left
            from the right
            
            */
            
            dp_left[i] = Math.min(dp_left[i - 1] + left[i], dp_right[i - 1] + jump_right_to_left[i - 1] + left[i] );
            
            /*
            
            take from the right tower or come
            right from the left
            
            */
            
            dp_right[i] = Math.min(dp_right[i - 1] + right[i], dp_left[i - 1] + right[i] + jump_left_to_right[i - 1]);
            
        }
        
          final_ans = Math.min(dp_left[n - 1], dp_right[n - 1]);
        
        ans.append(final_ans);
        
        if(t != testCases) {
            
            ans.append("\n");
            
        }
        
    }
    
    public static void main(String [] amit) {
        
        testCases = in.nextInt();
        
        for(int t = 0; t < testCases; ++t) {
            
            n = in.nextInt();
            
            left = new long[n];
            right = new long[n];
            jump_left_to_right = new long[n];
            jump_right_to_left = new long[n];
            
            for(int i = 0; i < n; ++i) {
                
                left[i] = in.nextLong();
                
            }
            
            for(int i = 0; i < n; ++i) {
                
                right[i] = in.nextLong();
                
            }
            
            for(int i = 0; i < n - 1; ++i) {
                
                jump_left_to_right[i] = in.nextLong();
                
            }
            
            for(int i = 0; i < n - 1; ++i) {
                
                jump_right_to_left[i] = in.nextLong();
                
            }
            
            solve(t + 1);
            
        }
        
        System.out.print(ans.toString());
        
    }
    
}
